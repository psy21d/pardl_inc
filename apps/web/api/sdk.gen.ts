// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetHealthV1Data, GetHealthV1Response, GetHealthV1Error, GetAchievementsData, GetAchievementsResponse, GetAchievementsError, GetDocumentsData, GetDocumentsResponse, GetDocumentsError, GetPremiumsData, GetPremiumsResponse, GetPremiumsError, GetUserAchievementsData, GetUserAchievementsResponse, GetUserAchievementsError, GetUserBestResultsData, GetUserBestResultsResponse, GetUserBestResultsError, GetUserPremiumsData, GetUserPremiumsResponse, GetUserPremiumsError, GetUserProfileData, GetUserProfileResponse, GetUserProfileError, PatchUserProfileData, PatchUserProfileResponse, PatchUserProfileError, GetSessionsData, GetSessionsResponse, GetSessionsError, PostSessionData, PostSessionError, GetSignedDocumentsData, GetSignedDocumentsResponse, GetSignedDocumentsError } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get health of the API
 * Get the health of the API server
 */
export const getHealthV1 = <ThrowOnError extends boolean = false>(options?: Options<GetHealthV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthV1Response, GetHealthV1Error, ThrowOnError>({
        url: '/health/v1',
        ...options
    });
};

/**
 * Get available achievements
 * Get all achievements available in the app.
 * Use this endpoint to fetch the list of achievements that users can unlock.
 *
 */
export const getAchievements = <ThrowOnError extends boolean = false>(options?: Options<GetAchievementsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAchievementsResponse, GetAchievementsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metadata/v1/achievements',
        ...options
    });
};

/**
 * Get available documents
 * Get all documents available in the app, including different versions nad locales.
 * Use this endpoint to fetch the list of documents such as privacy policy and terms of service.
 *
 */
export const getDocuments = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentsResponse, GetDocumentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metadata/v1/documents',
        ...options
    });
};

/**
 * Get available premiums
 * Get all premiums available in the app.
 * Use this endpoint to fetch the list of premium subscriptions that users can purchase.
 *
 */
export const getPremiums = <ThrowOnError extends boolean = false>(options?: Options<GetPremiumsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPremiumsResponse, GetPremiumsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metadata/v1/premiums',
        ...options
    });
};

/**
 * Get user achievements
 * Get all achievements that a user has unlocked.
 * Use this endpoint to fetch the list of achievements that users have completed.
 *
 */
export const getUserAchievements = <ThrowOnError extends boolean = false>(options: Options<GetUserAchievementsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserAchievementsResponse, GetUserAchievementsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/achievements',
        ...options
    });
};

/**
 * Get user best results
 * Get the best results of a user.
 * Use this endpoint to fetch the best results of a user in terms of breathing sessions.
 *
 */
export const getUserBestResults = <ThrowOnError extends boolean = false>(options: Options<GetUserBestResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserBestResultsResponse, GetUserBestResultsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/best-results',
        ...options
    });
};

/**
 * Get user-specific premiums
 * Fetch the list of premium subscriptions associated with a specific user.
 * This endpoint returns the premiums that the user has purchased or is eligible for.
 *
 */
export const getUserPremiums = <ThrowOnError extends boolean = false>(options: Options<GetUserPremiumsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserPremiumsResponse, GetUserPremiumsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/premiums',
        ...options
    });
};

/**
 * Get full user profile
 */
export const getUserProfile = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileResponse, GetUserProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/profile',
        ...options
    });
};

/**
 * Update user profile
 */
export const patchUserProfile = <ThrowOnError extends boolean = false>(options: Options<PatchUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUserProfileResponse, PatchUserProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get breathing sessions list
 */
export const getSessions = <ThrowOnError extends boolean = false>(options: Options<GetSessionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionsResponse, GetSessionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/sessions',
        ...options
    });
};

/**
 * Upload result of a breathing session
 */
export const postSession = <ThrowOnError extends boolean = false>(options: Options<PostSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostSessionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get signed documents
 */
export const getSignedDocuments = <ThrowOnError extends boolean = false>(options: Options<GetSignedDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSignedDocumentsResponse, GetSignedDocumentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/v1/{userId}/signed-documents',
        ...options
    });
};